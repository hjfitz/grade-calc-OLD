{"version":3,"sources":["worker.js"],"names":["CACHENAME","self","addEventListener","event","waitUntil","caches","open","then","cache","addAll","console","log","respondWith","match","request","response","fetch","catch"],"mappings":";AACA,IAAMA,EAAY,WAGlBC,KAAKC,iBAAiB,UAAW,SAACC,GACjCA,EAAMC,UACLC,OAAOC,KAAKN,GAAWO,KAAK,SAAAC,GAASA,OAAAA,EAAMC,OAAO,CACjD,eACA,mBAKHR,KAAKC,iBAAiB,WAAY,SAACC,GAClCO,QAAQC,IAAI,qBAIbV,KAAKC,iBAAiB,QAAS,SAACC,GAG/BO,QAAQC,IAAI,WAEZR,EAAMS,YACLP,OAAOQ,MAAMV,EAAMW,SAASP,KAAK,SAAAQ,GAAYA,OAAAA,GAAYC,MAAMb,EAAMW,SAASG,MAAM,WAE5EZ,OADPK,QAAQC,IAAI,6CACLN,OAAOQ,MAAM","file":"worker.js","sourceRoot":"../lib","sourcesContent":["/* eslint-disable no-restricted-globals */\nconst CACHENAME = 'grade-v1'\n\n// populate cache on install\nself.addEventListener('install', (event) => {\n\tevent.waitUntil(\n\t\tcaches.open(CACHENAME).then(cache => cache.addAll([\n\t\t\t'./index.html',\n\t\t\t'./main.js',\n\t\t])),\n\t)\n})\n// The activate handler takes care of cleaning up old caches.\nself.addEventListener('activate', (event) => {\n\tconsole.log('[worker] active')\n})\n\n// response from the cache first\nself.addEventListener('fetch', (event) => {\n\t// Skip cross-origin requests, like those for Google Analytics.\n\t// because scope is awesome in js\n\tconsole.log('invoked')\n\t// Prevent the default, and handle the request ourselves.\n\tevent.respondWith(\n\t\tcaches.match(event.request).then(response => response || fetch(event.request).catch(() => {\n\t\t\tconsole.log('[sw] Unable to fetch. Returning base page')\n\t\t\treturn caches.match('/')\n\t\t})),\n\t)\n})"]}